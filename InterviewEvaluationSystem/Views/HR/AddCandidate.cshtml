@model InterviewEvaluationSystem.Models.AddCandidateViewModels



@{
    ViewBag.Title = "AddCandidate";
    var grid = new WebGrid(Model.users, canPage: true, rowsPerPage: 10, canSort: true, fieldNamePrefix: "f1", pageFieldName: "p1");
    var gridCandidate = new WebGrid(source: Model.CandidateList, canPage: true, rowsPerPage: 10, canSort: true, fieldNamePrefix: "f2", pageFieldName: "p2");
    //int rowValUser = 0;
    //int rowValCandidate = 0;
}

@*<h2>Add Candidate</h2>*@
<br />
<br />


              <form id="frmCreate">
                    @Html.AntiForgeryToken()
                    <div class="form-horizontal">
        
        @Html.ValidationSummary(true, "", new { @class = "text-danger" })
        <div class="form-group">
            @Html.LabelFor(model => model.Name, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Name, new { htmlAttributes = new { @class = "form-control",placeholder="Candidate Name",id= "Name" } })
                <label id="lblCandidateName" class="text-danger"></label>
               @*@Html.Label("",htmlAttributes:  new { @id="lblCandidateName"})*@
                @*@Html.ValidationMessageFor(model => model.Name, "", new { @class = "text-danger" })*@
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Designation, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Designation, new { htmlAttributes = new { @class = "form-control",placeholder="Post Applied For",id= "Designation" } })
                <label id="lblDesignation" class="text-danger"></label>
                @*@Html.Label("", htmlAttributes: new { @id = "lblDesignation" })*@
                @*@Html.ValidationMessageFor(model => model.Designation, "", new { @class = "text-danger" })*@
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.DateOfBirth, "Date Of Birth", htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.DateOfBirth, new { htmlAttributes = new { @class = "form-control",id= "DateOfBirth" } })
                <label id="lblDOB" class="text-danger"></label>
                @*@Html.Label("", htmlAttributes: new { @id = "lblDOB" })*@
                @*@Html.ValidationMessageFor(model => model.DateOfBirth, "", new { @class = "text-danger" })*@
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.DateOfInterview, "Date Of Interview", htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.DateOfInterview, new { htmlAttributes = new { @class = "form-control",id= "DateOfInterview" } })
                <label id="lblDOI" class="text-danger"></label>
                @*@Html.Label("", htmlAttributes: new { @id = "lblDOI" })*@
                @*@Html.ValidationMessageFor(model => model.DateOfInterview, "", new { @class = "text-danger" })*@
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Email, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Email, new { htmlAttributes = new { @class = "form-control",placeholder="Email",id= "Email" } })
                <label id="lblEmail" class="text-danger"></label>
                @*@Html.Label("", htmlAttributes: new { @id = "lblEmail" })*@
                @*@Html.ValidationMessageFor(model => model.Email, "", new { @class = "text-danger" })*@
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.PAN, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.PAN, new { htmlAttributes = new { @class = "form-control",placeholder="PAN Number",id= "PAN" } })
                <label id="lblPAN" class="text-danger"></label>
                @*@Html.Label("", htmlAttributes: new { @id = "lblPAN" })*@
                @*@Html.ValidationMessageFor(model => model.PAN, "", new { @class = "text-danger" })*@
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.ExpectedSalary, "Expected Salary", htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.ExpectedSalary, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.ExpectedSalary, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.NoticePeriodInMonths, "Notice Period In Months", htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.NoticePeriodInMonths, new { htmlAttributes = new { @class = "form-control", @min = "0",placeholder="Notice Period In Months",id="noticeperiod" } })
                <label id="lblNoticePeriod" class="text-danger"></label>
                
                 @Html.ValidationMessageFor(model => model.NoticePeriodInMonths, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.TotalExperience, "Total Experience", htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.TotalExperience, new { htmlAttributes = new { @class = "form-control",@min="0",id="totalexperience" } })
                @Html.ValidationMessageFor(model => model.TotalExperience, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.PreviousCompany, "Previous Company", htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                <input id="btnAddTextBox" type="button" value="Add Previous Company" onclick="AppendTextBox()" class="btn btn-primary" /><br />
                <div id="divTextBoxes">
                    <!--Dynamic textboxes-->
                </div> 
                @*@Html.EditorFor(model => model.PreviousCompany, new { htmlAttributes = new { @class = "form-control" } })*@
                @Html.ValidationMessageFor(model => model.PreviousCompany, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Qualifications, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Qualifications, new { htmlAttributes = new { @class = "form-control",placeholder="Qualification",id= "Qualifications" } })
                <label id="lblQualification" class="text-danger"></label>
                 @*@Html.Label("", htmlAttributes: new { @id = "lblQualification" })*@
                @*@Html.ValidationMessageFor(model => model.Qualifications, "", new { @class = "text-danger" })*@
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Interviewer, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.DropDownList("user", null, "--Select--", new { @class = "form-control",id="ddlUser" })
                <label id="lblInterviewer" class="text-danger"></label>
                @*@Html.Label("", htmlAttributes: new { @id = "lblInterviewer" })*@
                @*@Html.ValidationMessageFor(model => model.Interviewer, "", new { @class = "text-danger" })*@
            </div>
        </div>

        <div class="form-group">
            <div class="col-md-offset-2 col-md-10">
                <input type="button" id="btnCreate" onclick="candidateValidation()" value="Add Candidate" class="btn btn-default" />
            </div>
        </div>
    </div>
</form>

<h2>Interviewer List</h2>
@grid.GetHtml(tableStyle: "table table-bordered table-striped table-condensed",
        headerStyle: "webgrid-header",
        footerStyle: "webgrid-footer",
        alternatingRowStyle: "webgrid-alternating-row",
        selectedRowStyle: "webgrid-selected-row",
        rowStyle: "webgrid-row-style",
        mode: WebGridPagerModes.All,
        columns: grid.Columns(
            //grid.Column("S.No.", format: item => rowValUser = rowValUser + 1),
            grid.Column("UserName", "User Name"),
            grid.Column("EmployeeId", "Employee Id"),
            grid.Column("Email", "Email"),
            grid.Column("Designation", "Designation"))
        )

<div id="SearchCandidate">
    <table>
        <tr>
            <td><input type="text" class="form-control" id="CandidateNameText" placeholder="Search Candidate"/></td>
            <td><input type="button" value="Search" class="btn btn-primary searchCandidate"/></td>
        </tr>
    </table>
</div>

<div id="gridContentCandidateResult">

</div>

<div id="gridContentCandidate">
    @gridCandidate.GetHtml(
        htmlAttributes: new { id = "WebGridCandidate" },
        tableStyle: "table table-bordered table-striped table-condensed",
        headerStyle: "webgrid-header",
        footerStyle: "webgrid-footer",
        alternatingRowStyle: "webgrid-alternating-row",
        selectedRowStyle: "webgrid-selected-row",
        rowStyle: "webgrid-row-style",
        mode: WebGridPagerModes.All,
        columns: gridCandidate.Columns(
            @*gridCandidate.Column("CandidateID", format: @<text>  <span class="display-modeCandidate">@item.CandidateID </span> <label id="lblCandidateID" class="edit-modeCandidate">@item.CandidateID</label> </text>),*@
            //grid.Column("S.No.", format: item => rowValCandidate = rowValCandidate + 1),
            gridCandidate.Column("CandidateName", "Candidate Name", format: 
            @<text>  
                <span class="display-modeCandidate"> <label id="lblCandidateName">@item.CandidateName</label> </span> 
                <input type="text" id="CandidateName" value="@item.CandidateName" class="edit-modeCandidate" />
                <div><label id="lblCandidateNameValidation" class="text-danger"></label></div>
            </text>),
            //   gridCandidate.Column("DateOfInterview", "Date Of Interview", format: @<text>  <span class="display-modeCandidate"> <label id="lblDateOfInterview">@item.DateOfInterview</label> </span> <input type="datetime" id="DateOfInterview" value="@item.DateOfInterview" class="edit-modeCandidate" /></text>),
             
            gridCandidate.Column("DateOfInterview", "Date Of Interview", format: 
            @<text>  
                <span class="display-modeCandidate"> <label id="lblDateOfInterview">@item.DateOfInterview.ToString("dd/MM/yyyy")</label> </span> 
                <input type="datetime" id="DateOfInterview" value="@item.DateOfInterview.ToString("dd/MM/yyyy")" class="edit-modeCandidate" />
                <div><label id="lblDateOfInterviewValidation" class="text-danger"></label></div>
            </text>),

            //grid.Column("DateOfInterview", "Date Of Interview", format:@<text> @item.DateOfInterview.ToString("MM/dd/yyyy")</text>),
            //gridCandidate.Column("InterviewerName", "Interviewer Name", format: @<text> <span class="display-modeCandidate"> <label id="lblInterviewerName">@item.InterviewerName</label> </span>  <input type="text" id="InterviewerName" value="@item.InterviewerName" class="edit-modeCandidate" /> </text>),

            gridCandidate.Column("InterviewerName", "Interviewer Name", format: 
            @<text> 
                 <span class="display-modeCandidate"> <label id="lblInterviewerName">@item.InterviewerName</label> </span> 
                 @Html.DropDownList("user", null, string.Empty, new {id="ddlInterviewerName", @class = "edit-modeCandidate form-control" })  
                 <div><label id="lblInterviewerNameValidation" class="text-danger"></label></div>
            </text>),

            gridCandidate.Column("Action", format: @<text>
                <button class="edit-userCandidate display-modeCandidate btn btn-primary" id="@item.CandidateID">Edit</button>
                <button class="save-userCandidate edit-modeCandidate btn btn-primary" id="@item.CandidateID">Save</button>
                <button class="cancel-userCandidate edit-modeCandidate btn btn-primary" id="@item.CandidateID">Cancel</button>
                <button class="delete-userCandidate btn btn-primary" id="@item.CandidateID">Delete</button>
            </text>))
        )
</div>


<div>
   @Html.ActionLink("Back To Dash Board", "HRHomePage", "HR")
</div>



@*<script type="text/javascript">
    function GetExistingDynamicTextBoxes(value) {
        var noticeperiod=$('#noticeperiod').val();
        var totalexp = $('#totalexperience').val();
        if (totalexp == "0" || noticeperiod=="") {
            alert("Give values for total experience and notice period");
            return false;
        }
        else {
            var div = $(" <div />");

            var textBox = $(" <input />").attr("type", "textbox").attr("name", "txtBoxes");
            textBox.addClass('form-control');
            textBox.val(value);
            div.append(textBox);

            var button = $(" <input />").attr("type", "button").attr("value", "Remove");
            button.attr("onclick", "DeleteTextBox(this)");
            button.addClass('btn btn-default');
            div.append(button);

            return div;
        }
    }
    function AppendTextBox() {
        var div = GetExistingDynamicTextBoxes("");
        $("#divTextBoxes").append(div);
    }

    function DeleteTextBox(button) {
        $(button).parent().remove();
    }

    @*$(function () {
        var values = eval('@Html.Raw(ViewBag.DemoMessage)');
        if (values != null) {
            $("#divTextBoxes").html("");
            $(values).each(function () {
                $("#divTextBoxes").append(GetExistingDynamicTextBoxes(this));
            });
        }
    });*@
@*</script>*@

<script src="~/Scripts/Candidate.js"></script>
<link href="~/Content/webgridstyle.css" rel="stylesheet" />


@model InterviewEvaluationSystem.Models.CandidateViewModel

@{
    ViewBag.Title = "AddCandidate";
    var grid = new WebGrid(Model.users, canPage: true, rowsPerPage: 5, canSort: true, fieldNamePrefix: "f1", pageFieldName: "p1");
    var gridCandidate = new WebGrid(source: Model.CandidateList, canPage: true, rowsPerPage: 5, canSort: true, fieldNamePrefix: "f2", pageFieldName: "p2");
}

<script src="~/Scripts/Candidate.js"></script>

<ol class="breadcrumb">
    <li class="breadcrumb-item">
        <a href="~/HR/HRHomePage">Home Page</a>
    </li>
    <li class="breadcrumb-item active">Interviews</li>
    <li class="breadcrumb-item active">Candidates</li>
</ol>

<form id="frmCreate">
    @Html.AntiForgeryToken()
    <div class="form-horizontal">
        @Html.ValidationSummary(true, "", new { @class = "text-danger" })
        <div class="form-group">
            @Html.LabelFor(model => model.Name, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Name, new { htmlAttributes = new { @class = "form-control", @placeholder = "Name" } })
                @Html.ValidationMessageFor(model => model.Name, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Designation, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Designation, new { htmlAttributes = new { @class = "form-control", @placeholder = "Designation" } })
                @Html.ValidationMessageFor(model => model.Designation, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.DateOfBirth, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.DateOfBirth, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.DateOfBirth, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.DateOfInterview, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.DateOfInterview, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.DateOfInterview, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Email, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Email, new { htmlAttributes = new { @class = "form-control", @placeholder = "Email" } })
                @Html.ValidationMessageFor(model => model.Email, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.PAN, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.PAN, new { htmlAttributes = new { @class = "form-control", @placeholder = "PAN" } })
                @Html.ValidationMessageFor(model => model.PAN, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.ExpectedSalary, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.ExpectedSalary, new { htmlAttributes = new { @class = "form-control", @placeholder = "Expected Salary" } })
                @Html.ValidationMessageFor(model => model.ExpectedSalary, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.NoticePeriodInMonths, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.NoticePeriodInMonths, new { htmlAttributes = new { @class = "form-control", @placeholder = "Notice Period In Months" } })
                @Html.ValidationMessageFor(model => model.NoticePeriodInMonths, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.TotalExperience, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.TotalExperience, new { htmlAttributes = new { @class = "form-control", @placeholder = "Total Experience" } })
                @Html.ValidationMessageFor(model => model.TotalExperience, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.PreviousCompany, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                <input id="btnAddTextBox" type="button" value="Add Previous Company" onclick="AppendTextBox()" class="btn btn-default" placeholder="Previous Company"/><br />
                <div id="divTextBoxes">
                    @Html.ValidationMessageFor(model => model.PreviousCompany, "", new { @class = "text-danger" })
                </div>
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Qualifications, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Qualifications, new { htmlAttributes = new { @class = "form-control", @placeholder = "Qualifications" } })
                @Html.ValidationMessageFor(model => model.Qualifications, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Interviewer, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.DropDownList("user", null, "--select--", new { @class = "form-control" })
                @Html.ValidationMessageFor(model => model.Interviewer, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            <div class="col-md-offset-2 col-md-10">
                <input type="button" id="btnCreate" value="Add Candidate" class="btn btn-primary" />
            </div>
        </div>
    </div>
</form>
@if (Model.users.Any())
{
    @grid.GetHtml(tableStyle: "table table-bordered table-striped table-condensed",
        headerStyle: "webgrid-header",
        footerStyle: "webgrid-footer",
        alternatingRowStyle: "webgrid-alternating-row",
        selectedRowStyle: "webgrid-selected-row",
        rowStyle: "webgrid-row-style",
        mode: WebGridPagerModes.All,
        columns: grid.Columns(
            grid.Column("UserName", "User Name"),
            grid.Column("EmployeeId", "Employee Id"),
            grid.Column("Email", "Email"),
            grid.Column("Designation", "Designation"))
        )
}

<div id="SearchCandidate">
    <table>
        <tr>
            <td><input type="text" class="form-control" id="CandidateNameText" /></td>
            <td><input type="button" id="searchCandidate" value="Search" class="btn btn-primary" /></td>
        </tr>
    </table>
</div>
<br />
<div id="gridContentCandidate">
@if (Model.CandidateList.Any())
{
    @gridCandidate.GetHtml(tableStyle: "table table-bordered table-striped table-condensed",
        headerStyle: "webgrid-header",
        footerStyle: "webgrid-footer",
        alternatingRowStyle: "webgrid-alternating-row",
        selectedRowStyle: "webgrid-selected-row",
        rowStyle: "webgrid-row-style",
        mode: WebGridPagerModes.All,
        columns: gridCandidate.Columns(
            gridCandidate.Column("CandidateID", format:
            @<text>
                <span class="display-modeCandidate">@item.CandidateID </span>
                <label id="lblCandidateID" class="edit-modeCandidate">@item.CandidateID</label>
            </text>),
            gridCandidate.Column("CandidateName", "CandidateName", format:
            @<text>
                <span class="display-modeCandidate"> <label id="lblCandidateName">@item.CandidateName</label> </span>
                <input type="text" id="CandidateName" value="@item.CandidateName" class="edit-modeCandidate" />
            </text>),
            gridCandidate.Column("DateOfInterview", "Date Of Interview", format:
            @<text>
                <span class="display-modeCandidate"> <label id="lblDateOfInterview">@item.DateOfInterview.ToString("dd/MM/yyyy")</label> </span>
                <input type="datetime" id="DateOfInterview" value="@item.DateOfInterview.ToString("dd/MM/yyyy")" class="edit-modeCandidate" />
            </text>),
            gridCandidate.Column("InterviewerName", "Interviewer Name", format:
            @<text>
                <span class="display-modeCandidate"> <label id="lblInterviewerName">@item.InterviewerName</label> </span>
                @Html.DropDownList("user", null, string.Empty, new { id = "ddlInterviewerName", @class = "edit-modeCandidate form-control" })
            </text>),
            gridCandidate.Column("Action", format: @<text>
                <button class="edit-userCandidate display-modeCandidate btn btn-default"><i class="fa fa-pencil-square-o" aria-hidden="true"></i> Edit</button>
                <button class="save-userCandidate edit-modeCandidate btn btn-default"><i class="fa fa-refresh" aria-hidden="true"></i> Update</button>
                <button class="cancel-userCandidate edit-modeCandidate btn btn-default"><i class="fa fa-times" aria-hidden="true"></i> Cancel</button>
                <button class="delete-userCandidate btn btn-default"><i class="fa fa-trash-o" aria-hidden="true"></i> Delete</button>
            </text>))
        )
}
</div>

<div>
    @Html.ActionLink("Back to DashBoard", "HRHomePage")
</div>

<script>
    function GetExistingDynamicTextBoxes(value) {
        var div = $(" <div />");

        var textBox = $(" <input />").attr("type", "textbox").attr("name", "txtBoxes");
        textBox.addClass('form-control');
        textBox.val(value);
        div.append(textBox);

        var button = $(" <input />").attr("type", "button").attr("value", "Remove");
        button.attr("onclick", "DeleteTextBox(this)");
        button.addClass('btn btn-default');
        div.append(button);

        return div;
    }
    function AppendTextBox() {
        var div = GetExistingDynamicTextBoxes("");
        $("#divTextBoxes").append(div);
    }

    function DeleteTextBox(button) {
        $(button).parent().remove();
    }

    $(function () {
        var values = eval('@Html.Raw(ViewBag.DemoMessage)');
        if (values != null) {
            $("#divTextBoxes").html("");
            $(values).each(function () {
                $("#divTextBoxes").append(GetExistingDynamicTextBoxes(this));
            });
        }
    });
</script>
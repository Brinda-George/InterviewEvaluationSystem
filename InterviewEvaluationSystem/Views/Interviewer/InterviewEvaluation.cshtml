@model InterviewEvaluationSystem.Models.InterviewEvaluationViewModel

@{
    ViewBag.Title = "Interview Evaluation";
    WebGrid webgridRatingScale = new WebGrid(source: Model.RatingScale, canSort: false);
    List<WebGrid> webgrids = new List<WebGrid>(10);
    for (int i = 0; i < Model.SkillCategories.Count; i++)
    {
        webgrids.Add(new WebGrid(source: Model.SkillsByCategory[i], canPage: true, canSort: false, rowsPerPage: 15));
    }
}

<script src="~/Scripts/interviewevaluation.js"></script>

<ol class="breadcrumb">
    <li class="breadcrumb-item">
        <a href="~/Interviewer/HomePage">Home Page</a>
    </li>
    <li class="breadcrumb-item">
        <a href="~/Interviewer/EvaluationStatus">Interview Evaluation Status</a>
    </li>
    <li class="breadcrumb-item active">Interview Evaluation</li>
</ol>

<h2>Interview Evaluation</h2>

<input type="hidden" id="roundId" value="@TempData["roundID"]" />
<input type="hidden" id="evaluationId" value="@TempData["evaluationID"]" />
<p>Name of Candidate: @Model.CandidateName</p>

@using (Html.BeginForm())
{
    <h4>Rating Scale</h4>
    if (Model.RatingScale.Any())
    {
        <div id="grid1">
            @webgridRatingScale.GetHtml(tableStyle: "table table-bordered table-striped",
                headerStyle: "webgrid-header",
                alternatingRowStyle: "webgrid-alternating-row",
                rowStyle: "webgrid-row-style",
                mode: WebGridPagerModes.All,
                columns: webgridRatingScale.Columns(
                    webgridRatingScale.Column(columnName: "RateScale", header: "RateScale"),
                    webgridRatingScale.Column(columnName: "RateValue", header: "Value"),
                    webgridRatingScale.Column(columnName: "Description", header: "Description")
                )
            )
        </div>
    }

    for (int i = 0; i < Model.SkillCategories.Count; i++)
    {
        <h4>@Model.SkillCategories[i].SkillCategory</h4>
        List<WebGridColumn> columns = new List<WebGridColumn>();
        WebGridColumn column = new WebGridColumn();
        column.ColumnName = "SkillName";
        column.Header = "Skill Name";
        columns.Add(column);
        foreach (var round in Model.Rounds)
        {
            if (round.RoundID < Convert.ToInt32(@TempData["roundID"]))
            {
                columns.Add(new WebGridColumn()
                {
                    ColumnName = round.RoundName,
                    Header = round.RoundName,
                    Format = (item) => Html.DropDownListFor(m => m.RatingScale, new SelectList(Model.RatingScale, "RateScaleID", "RateValue"), new HtmlString(Model.ScoresByRound[round.RoundID - 1][@item.ID - 1].RateScaleID.ToString()).ToString(), new { @id = "id" + round.RoundID + item.SkillID, @class = "class" + round.RoundID, @style = "colWidth" })
                });
            }
            else
            {
                columns.Add(new WebGridColumn()
                {
                    ColumnName = round.RoundName,
                    Header = round.RoundName,
                    Format = (item) => Html.DropDownListFor(m => m.RatingScale, new SelectList(Model.RatingScale, "RateScaleID", "RateValue"), "--select--", new { @id = "id" + round.RoundID + item.SkillID, @class = "class" + round.RoundID, @style = "colWidth" })
                });
            }

        }
        <div class="grid">
            @webgrids[i].GetHtml(tableStyle: "table table-bordered table-striped",
                headerStyle: "webgrid-header",
                alternatingRowStyle: "webgrid-alternating-row",
                rowStyle: "webgrid-row-style",
                htmlAttributes: new { id = "grid" },
                mode: WebGridPagerModes.All,
                columns: columns
            )
        </div>
    }
    @Html.TextArea("Comments", new { @class = "form-control", @placeholder = "Comments", @rows = "5", style = "width: 100%; max-width: 100%;" })<br />
    <input type="button" id="proceed" value="Proceed" class="btn btn-primary" onclick="getValues(this)" />
    <input type="button" id="reject" value="Reject" class="btn btn-primary" onclick="getValues(this)" />
}
<br />
<div>
    @Html.ActionLink("Back to Home", "HomePage", "Interviewer")
</div>